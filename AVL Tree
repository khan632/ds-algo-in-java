package com.company;

public class Main {

    public static class Node{
        int data = 0;
        Node left = null;
        Node right = null;

        int height = -1;
        int bal = 0;

        public Node(){

        }

        public Node(int data){
            this.data = data;
        }

        public Node(int data,Node left,Node right){
            this.data = data;
            this.left = left;
            this.right = right;
        }

        @Override
        public String toString () {
           String str = "";

           str += ((left != null) ? left.data : ".");
           str += (" -> " + data + " <-");
           str += ((right != null) ? right.data : ".");

           str += "\n";

           if (left != null) {
               str += left.toString();
           } else if (right != null) {
               str += right.toString();
           }
           return str;
       }
    }

    public static  Node lefRot(Node node){
        Node y = node.left;
        Node yRight = y.right;

        y.right = node;
        node.left = yRight;

        updateHeightAndBalance(node);
        updateHeightAndBalance(y);
        return y;
    }

    public static Node rightRot(Node node){
        Node y = node.right;
        Node yleft = y.left;

        y.left = node;
        node.right = yleft;

        updateHeightAndBalance(node);
        updateHeightAndBalance(y);

        return y;
    }

    public static Node rotations(Node node){
        updateHeightAndBalance(node);

        if(node.bal == 2){ // only ll & lr rotation can perform under this block

            if(node.left.bal == 1){
                return lefRot(node);
            }else{
                    node.left = rightRot(node.left);
                    return lefRot(node);
            }

        }else if(node.bal == -2){ // only ll & lr rotation can perform under this block
            if(node.right.bal == -1){
                return rightRot(node);
            }else{
                node.right = lefRot(node.right);
                return rightRot(node);
            }

        }
        return node;
    }

    public static Node addNode(Node node, int data){
        if(node == null){
            return new Node(data);
        }
        if(data > node.data){
            node.right = addNode(node.right,data);
        }
        if(data < node.data){
            node.left = addNode(node.left,data);
        }
        node = rotations(node);
        return node;
    }

    public static void updateHeightAndBalance(Node node){

        int lh = -1;
        int rh = -1;

        if(node.left != null)
            lh = node.left.height;
        if(node.right != null)
            rh = node.right.height;

        node.height = Math.max(lh,rh) + 1;

        node.bal = lh - rh;

    }

    public static int max(Node node){
        if(node.right != null) {
            return max(node.right);
        }else{
            return node.data;
        }
    }

    public static Node removeNode(Node node, int data){
        if(node == null){
            return null;
        }

        if(data > node.data){
            node.right = removeNode(node.right,data);
        }else if(data < node.data){
            node.left = removeNode(node.left,data);
        }else{
            if(node.left != null && node.right != null){
                int leftMax = max(node.left);
                node.data = leftMax;
                node.left = removeNode(node.left,leftMax);
                return node;
            }else if(node.left != null){
                return node.left;
            }else if(node.right != null){
                return node.right;
            }else {
                return null;
            }
        }
        return node;
    }

    public static void display(Node node){
        if(node == null) return;

        String str = "";

        str += node.left != null ? node.left.data : ".";
        str += " -> "+ node.data+ " <- ";
        str += node.right != null ? node.right.data : ".";

        System.out.println(str);
        display(node.left);
        display(node.right);
    }


    public static void main(String[] args) {
	    Node root = null;
	    for(int i = 1; i <= 20; i++){
	        root = addNode(root,i*10);
        }
	    root = removeNode(root,80);
	    root = removeNode(root,40);
	    display(root);
    }
}
