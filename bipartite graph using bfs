import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }
   
   public static class pair{
       int val;
        String psf;
        int level;
        
        pair(int val, String psf, int level){
            this.val = val;
            this.psf = psf;
            this.level = level;
        }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      int [] visited = new int[vtces];
      Arrays.fill(visited,-1);
      for(int i = 0; i < vtces; i++){
          if(visited[i] == -1){
          boolean isBipartite = isbipartite(graph, i, visited);
          if(isBipartite == false){
              System.out.println(false);
              return;
          }
      }
      }
      System.out.println(true);
   }
   public static boolean isbipartite(ArrayList<Edge> [] graph, int src, int[] visited){
       ArrayDeque<pair> dq = new ArrayDeque<>();
       dq.add(new pair(src, src+"", 0));
       
       while(dq.size() != 0){
           pair rem = dq.removeFirst();
           
           if(visited[rem.val] != -1){
               if(rem.level != visited[rem.val]){
                   return false;
               }
           }else{
               visited[rem.val] = rem.level;
           }
           
           for(Edge e: graph[rem.val]){
               if(visited[e.nbr] == -1){
                   dq.add(new pair(e.nbr, rem.psf+ e.nbr, rem.level + 1));
               }
           }
       }
       return true;
   }
}
