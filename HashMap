package com.company;

import java.util.*;

    public static void main(String[] args) {

    }

//===================================================================================================
                // merge K sorted lists
//public static class pair implements Comparable<pair>{
//    int val;
//    int listIxd;
//    int dataIxd;
//
//    public pair(int val, int listIxd, int dataIxd){
//        this.val = val;
//        this.listIxd = listIxd;
//        this.dataIxd = dataIxd;
//    }
//
//    public int compareTo(pair oth){
//        return this.val - oth.val;
//    }
//}
//
//    public static ArrayList<Integer> mergeKSortedLists(ArrayList<ArrayList<Integer>> lists){
//        ArrayList<Integer> rv = new ArrayList<>();
//
//        PriorityQueue<pair> pq = new PriorityQueue<>();
//        for(int i = 0; i < lists.size(); i++){
//            pair p = new pair(lists.get(i).get(0),i,0);
//            pq.add(p);
//        }
//
//        while(pq.size() != 0){
//            pair p = pq.remove();
//            rv.add(p.val);
//            p.dataIxd++;
//
//            if(p.dataIxd < lists.get(p.listIxd).size()){
//                p.val = lists.get(p.listIxd).get(p.dataIxd);
//                pq.add(p);
//            }
//        }
//
//        return rv;
//    }

//==========================================================================================================
             //Medium priority queue

//    public static class MedianPriorityQueue {
//        PriorityQueue<Integer> left;
//        PriorityQueue<Integer> right;
//
//        public MedianPriorityQueue() {
//            left = new PriorityQueue<>(Collections.reverseOrder());
//            right = new PriorityQueue<>();
//        }
//
//        public void add(int val) {
//            if(right.size() == 0 || val < right.peek()){
//                left.add(val);
//            }else{
//                right.add(val);
//            }
//
//            if(left.size() - right.size() > 1){
//                right.add(left.remove());
//            }else if(right.size() - left.size() > 1){
//                left.add(right.remove());
//            }
//        }
//
//        public int remove() {
//            if(left.size() + right.size() == 0){
//                System.out.println("Underflow");
//                return -1;
//            }
//
//            if(left.size() >= right.size()){
//                return left.remove();
//            }else{
//                return right.remove();
//            }
//        }

//==================================================================================================
            // K sort sorted array(without using extra space)
//        int [] arr = {3,2,4,1,6,5,7,8,9};
//        int k = 3;
//        PriorityQueue<Integer> pq = new PriorityQueue<>();
//        int i = 0;
//        for(; i <= k; i++){
//            pq.add(arr[i]);
//        }
//
//        for(i = k+1; i < arr.length; i++){
//            int min = pq.remove();
//            arr[i - (k+1)] = min;
//            pq.add(arr[i]);
//        }
//
//        while(pq.size() != 0){
//            arr[i - (k+1)] = pq.remove();
//            i++;
//        }
//
//        for (i = 0; i < arr.length; i++){
//            System.out.println(arr[i]);
//        }
//    }
//==================================================================================================
            // K sort sorted array(using extra space)

//        int [] arr = {3,2,4,1,6,5,7,9,8};
//        int k = 3;
//        PriorityQueue<Integer> pq = new PriorityQueue<>();
//        for(int i = 0; i <= k; i++){
//            pq.add(arr[i]);
//        }
//
//        for(int i = k+1; i < arr.length; i++){
//            System.out.print(pq.remove()+ " ");
//            pq.add(arr[i]);
//        }
//            while(pq.size() != 0){
//                System.out.print(pq.remove()+ " ");
//            }
//    }
//====================================================================================================
            //k-largest element/ team selection
//        int [] arr = {12, 62, 22, 15, 37, 99, 11, 37, 98, 67, 31, 84, 99, 4};
//        int k = 4;
//        PriorityQueue<Integer> pq = new PriorityQueue<>();
//        for(int i = 0; i < k; i++){
//            pq.add(arr[i]);
//        }
//
//        for(int i = k; i < arr.length; i++){
//            if(arr[i] > pq.peek()){
//                pq.remove();
//                pq.add(arr[i]);
//            }
//        }
//
//        while(pq.size() != 0){
//            System.out.print(pq.remove()+ " ");
//        }
//    }
//=====================================================================================================
        //priority queue with reverse function
//        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
//        pq.add(15);
//        pq.add(2);
//        pq.add(-1);
//        pq.add(12);
//        pq.add(32);
//        System.out.println(pq.peek());
//        while(pq.size() != 0){
//            System.out.print(pq.remove()+" ");
//        }
//=========================================================================================================
        //priority Queue function
//        PriorityQueue<Integer> pq = new PriorityQueue<>();
//        pq.add(15);
//        pq.add(2);
//        pq.add(-1);
//        pq.add(12);
//        pq.add(32);
//            System.out.println(pq.peek());
//        while(pq.size() != 0){
//            System.out.print(pq.remove()+" ");
//        }
//    }
//=========================================================================================================
        //longsest consecutive subsequence
//        int [] arr = {10,5,9,1,11,8,6,5,3,12,2};
//
//        HashMap<Integer,Boolean> map = new HashMap<>();
//
//        for (int val : arr) {
//            map.put(val,true);
//        }
//
//        for (int val:arr) {
//           if (map.containsKey(val-1)){
//               map.put(val,false);
//           }
//        }
//
//        int maxSpace = 0;
//        int maxLen = 0;
//        for(int val: arr) {
//            if (map.get(val) == true) {
//                int tempLen = 1;
//                int tempSpace = val;
//
//                while (map.containsKey(tempSpace + tempLen)) {
//                    tempLen++;
//                }
//
//                if (tempLen > maxLen) {
//                    maxLen = tempLen;
//                    maxSpace = tempSpace;
//                }
//            }
//        }
//            for(int i = 0; i < maxLen; i++){
//                System.out.println(maxSpace + i);
//            }
//
//
//    }
//=======================================================================================================
       // get common element--> part2
//        int [] arr1 = {3,2,5,4,1,2,1,1,1};
//        int [] arr2 = {4,3,1,1,2,3,4};
//
//        HashMap<Integer,Integer> map = new HashMap<>();
//        for(int i = 0; i < arr1.length; i++) {
//            if (map.containsKey(arr1[i])) {
//                int oldVal = map.get(arr1[i]);
//                map.put(arr1[i], oldVal + 1);
//            } else {
//                map.put(arr1[i], 1);
//            }
//        }
//
//            for(int i = 0; i < arr2.length; i++){
//                if(map.containsKey(arr2[i]) && map.get(arr2[i]) > 0){
//                    System.out.println(arr2[i]);
//                    int oldVal = map.get(arr2[i]);
//                    map.put(arr1[i], oldVal-1);
//                }
//            }
//        }


//===========================================================================================================
        //common element in array---->1
//        int [] arr1 = {1,2,3,5,6,1,4,2,2,3,2};
//        int [] arr2 = {4,3,2,1,1,5};
//
//        HashMap<Integer,Integer> map = new HashMap<>();
//        for(int i = 0; i < arr1.length; i++){
//            map.put(arr1[i], 1);
//        }
//
//        for(int i = 0; i < arr2.length; i++){
//            if(map.containsKey(arr2[i])) {
//                System.out.print(arr2[i] + " ");
//                map.remove(arr2[i]);
//            }
//        }
//==========================================================================================================
        //frequeny of a character
//        String str ="anbdhbjdkblelndanjjsaaa";
//        HashMap<Character,Integer> map = new HashMap<>();
//        int max = 1;
//        for(int  i = 0; i < str.length(); i++){
//            char ch = str.charAt(i);
//            if(map.containsKey(ch)){
//                int oldVal = map.get(ch);
//                map.put(ch,oldVal+1);
//                max = Math.max(max,oldVal+1);
//            }else{
//                map.put(ch,1);
//            }
//        }
//
//        ArrayList<Character> key = new ArrayList<>(map.keySet());
//        for(char keyss : key){
//            if(map.get(keyss) == max){
//                System.out.println(keyss);
//                break;
//            }
//        }


